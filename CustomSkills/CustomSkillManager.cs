using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustomSkills
{
	/// <summary>
	/// Stores CustomSkills, and manages various aspects of their usage.
	/// </summary>
	internal class CustomSkillManager
	{
		internal const string DefaultCategoryName = "uncategorized";

		internal Dictionary<string, CustomSkillCategory> Categories { get; private set; }

		internal CustomSkillManager()
		{
			Categories = new Dictionary<string, CustomSkillCategory>()
			{
				{ DefaultCategoryName, new CustomSkillCategory(DefaultCategoryName) }
			};
		}

		private CustomSkillManager(List<CustomSkillCategory> customSkillCategories) : this()
		{
			foreach(var srcCategory in customSkillCategories)
			{
				if(Categories.TryGetValue(srcCategory.Name, out var dstCategory))
				{
					//copy to existing
					foreach(var kvp in srcCategory)
						dstCategory.Add(kvp.Key, kvp.Value);
				}
				else
				{
					//just add incoming category
					Categories.Add(srcCategory.Name, srcCategory);
				}
			}
		}

		internal CustomSkillCategory TryGetCategory(string categoryName = null)
		{
			categoryName = string.IsNullOrWhiteSpace(categoryName) ? DefaultCategoryName : categoryName;

			Categories.TryGetValue(categoryName, out var category);

			return category;
		}

		internal CustomSkillDefinition TryGetDefinition(string skillName, string categoryName = null)
		{
			var category = TryGetCategory(categoryName);

			//find skill def
			category.TryGetValue(skillName, out var skillDefinition);

			return skillDefinition;
		}

		internal static CustomSkillManager Load(string filePath, bool createIfNeeded = true)
		{
			DataDefinitionFile<List<CustomSkillCategory>> fileDef = null;

			if(!File.Exists(filePath))
			{
				if(createIfNeeded)
				{
					fileDef = new DataDefinitionFile<List<CustomSkillCategory>>()
					{
						Version = 0.1f,
						Metadata = new Dictionary<string, object>()
						{
							{ "Authors", "Autogenerated by CustomSkills plugin." },
							{"Remarks", "This file format is under active development. Do not rely on any properties being available in future versions." }
						},
						Data = new List<CustomSkillCategory>()
						{
							new CustomSkillCategory(DefaultCategoryName),
							new CustomSkillCategory("Punk")
						}
					};

					var json = JsonConvert.SerializeObject(fileDef, Formatting.Indented);
					File.WriteAllText(filePath, json);
				}
			}
			else
			{
				var json = File.ReadAllText(filePath);
				fileDef = JsonConvert.DeserializeObject<DataDefinitionFile<List<CustomSkillCategory>>>(json);
			}

			//convert file def into a customskillmanager...
			var mgr = new CustomSkillManager(fileDef.Data);

			return mgr;
		}
	}
}
